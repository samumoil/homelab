# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, lib, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      #./hardware-configuration.nix
      ./nixos


####### https://github.com/NixOS/nixos-hardware/tree/master
#       <nixos-hardware/lenovo/thinkpad/t495>

      # Include window manager configuration.
      ./wm-common.nix
      #./wm-sway.nix
      ./wm-kde_plasma.nix
      ./test.nix
    ];

  # Bootloader.
  boot = {
    # All Kernel Messages with a log level smaller than this setting will be 
    # printed to the console.
    #consoleLogLevel = 1;
    #initrd.verbose = false;
    loader = {
      efi.canTouchEfiVariables = true;
      systemd-boot = {
        enable = true;
        consoleMode = "keep"; # max / keep / auto
        editor = false;
        configurationLimit = 10; # Maximum number of latest generations in the boot menu. 
      };
    };
    # https://wiki.archlinux.org/title/Silent_boot
    kernelParams = [
      "quiet"
#      "rd.systemd.show_status=auto" # Show only errors 
#      "rd.udev.log_level=1"
#      "rd.udev.log_priority=1"
    ];
  };

  networking.hostName = "sam-nix"; # Define your hostname.
  #networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Europe/Helsinki";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "fi_FI.UTF-8";
    LC_IDENTIFICATION = "fi_FI.UTF-8";
    LC_MEASUREMENT = "fi_FI.UTF-8";
    LC_MONETARY = "fi_FI.UTF-8";
    LC_NAME = "fi_FI.UTF-8";
    LC_NUMERIC = "fi_FI.UTF-8";
    LC_PAPER = "fi_FI.UTF-8";
    LC_TELEPHONE = "fi_FI.UTF-8";
    LC_TIME = "fi_FI.UTF-8";
  };

  # Configure keymap in X11
  services.xserver = {
    xkb.layout = "fi";
    xkb.variant = "nodeadkeys";
    enable = true;
  };

  # Configure console
  console = {
    earlySetup = true;
    keyMap = "fi";
    packages = with pkgs; [ 
      tamsyn 
    ];
    font = "Tamsyn10x20r";
  };

  users.users.sam = {
    isNormalUser = true;
    description = "sam";
    uid = 1000;
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [];
  };
  # Create /samu/
  systemd.tmpfiles.rules = [ 
    "d /samu	 		0700 1000 root" 
    "d /samu/pcloud 		0700 1000 root" 
    "d /samu/credentials 	0700 1000 root"
    "L /home/sam/samu		0700 1000 100 - /samu"
    "L /home/sam/pcloud		0700 1000 100 - /samu/pcloud"
  ];

  users.users.toot = {
    isNormalUser = true;
    description = "toot";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [];
  };

  programs.zsh.enable = true;
  users.defaultUserShell = pkgs.zsh;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  services = {
    tailscale.enable = true;
#    tailscale.authKeyFile = "/samu/credentials/tailscale.auth";
    gvfs.enable = true; # Mount, trash, and other functionalities
    flatpak.enable = true;
  };

  systemd.services.flatpak-repo = {
    wantedBy = [ "multi-user.target" ];
    path = [ pkgs.flatpak ];
    script = ''
      flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    '';
  };

  fonts = {
    packages = with pkgs; [ 
      geist-font
      tamsyn 
    ];
    fontDir.enable = true;
  };

  programs = {
    git.enable = true;
    screen.enable = true;
    yazi.enable = true;
  };
  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    pciutils
    busybox
    wget
    tree
    btop
    dust
    distrobox
    bat # pretty 'cat' replacement
    #bat-extras.*
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.05"; # Did you read the comment?

}

